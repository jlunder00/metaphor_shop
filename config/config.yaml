metaphor_shop:
  max_urls: 10
  max_products_per_page: 10
metaphor_shop_search:
  query_system_prompt: "You are a helpful assistant that generates shopping related search queries based on user questions. Generate one and only one search query to find products the user might like to buy. Generate queries searching for pages where you can buy products that a company is advertising. If the user has a preferred store or brand, specified by \"preferred store: x\" or \"preferred brand: x\" after the prompt, include that in the query naturally. if none are specified, do not include it in the query."
  model: "gpt-3.5-turbo"
  use_autoprompt: true
shop:
  text_only: false
  attr_only: false
  join_technique: "update" # join_technique: "manual"
  join_source: "text"
  text_tag: "all"
  text_attrs: {} 
    # href: true
  attr_tag: "all"
  search_attrs: "url_selector"
  text_system_message: ""
  attr_system_message: "You are a helpful assistant that identifies and extracts key information about products from product and store pages, given the attributes of HTML tags on a webpage, organized in a python list such that the attributes, as a python dict, for a particular tag is an item in the list. Generate a CSV interpret-able string with the following columns: Product Name, Image URL. Find all the products on the page that have this information and generate the CSV accordingly. If any information is missing for a particular product, do not include it in the CSV. The Product Name column should have the reported product name. There may be duplicate names on the webpage, only include one entry for these duplicates. Additionally, if a brand name is mentioned in a product name, be sure to include it. Some sites may include an related example search near the top of the page with corresponding products. Only include products that come after that search term. Do not include Product Names that look like search terms. Search terms are less descriptive than product names. The Image URL column should be a URL, being the URL where the product image can be located at. Some of the URLs within the webpage may be routes originating from the current webpages url. Typically, these kinds of links will begin with \"/\" rather than \"http\" or \"https\". If you find image URLs that fit this description, be sure to attach them to the original webpages url to make a standalone link that can be accessed directly, if necessary. Include only products that are similar to the products suggested by/specified by the included page title, URL, and webpage search query.\n\nNote: some URLs in the html attributes may be route extensions on top of the original page URL. These are typically more likely to be product URLs, whereas Image URLs tend to be standalone full URLS.\n\n\nIncluded are some examples of what product names look like vs a search term that might prompt them:\n\nSearch Term: Butterfly Costume for Girls\nProduct Name: Tibeha Butterfly Wings Costume for Girls - Halloween Cape Kids with Mask, Antenna Headband, Head Clips \n\nSearch Term: SSD 2TB\nProduct Name: Western Digital 1TB WD Blue SN580 NVMe Internal Solid State Drive SSD - Gen4 x4 PCIe 16Gb/s, M.2 2280, Up to 4,150 MB/s - WDS100T3B0E \n\nSearch Term: Fish tank filter\nProduct Name: PULACO Ultra Quiet Aquarium Hang on Filter (66GPH 3W), Small Fish Tank Filter for 2 to 8 Gallons Fish Tank \n\nSearch Terms should never be included in the CSV. Find and include the corresponding product name instead. \n\nFormat these datapoints as a CSV interpret-able string, surrounding each datapoint in quotes and delimiting each datapoint with ';'.\nBegin with the header specifying all the columns. Reminder: all data points must be surrounded by double quotes, especially product names that have commas in them, to ensure it is properly interpreted.\n\n\nAdditionally, only include most relevant products and only include the following number of them at most: "
  update_text_with_attr_system_message: ""
  update_attr_with_text_system_message: "You are a helpful assistant that identifies and extracts key information about products from product and store pages, given the text of content HTML tags on a webpage, organized in a python list such that the text for each tag an item in the list and a CSV table containing product information. Update the CSV interpret-able string with the following new columns: Price, Rating. For each of the products in the CSV, find this information within the list of HTML tag text content and update the CSV accordingly. To do this, for each product name in the CSV, find the corresponding product name in the list of HTML tag text content and search for the corresponding price and rating, which should be nearby the product name in the list. The Price column should contain the associated price or price range for each product. Include the appropriate currency symbol as well note that the price or price range may be repeated next to each other, for example, the text for the html for the price of a product with a price of $17.97-$19.99 might show up in the text as $17.97$17.99-$19.99$19.99. There may also be repetitions of a price multiple times after a product name that are associated with that product. Also, if there is mention of a percentage sale or a \"typical\" price or a \"list\" price and multiple prices listed, take the lower price. Be aware of this and report only one price/price range in the CSV, correcting this repetition when it happens. If there is not a price that is nearby the product name in the python list, enter \"None\" into the Price column for that product. Do not include prices or ratings that are many indexes away from the product name/each other. Some products displayed do not have a price or rating displayed, but the vast majority do have both. The Rating column should be a number, between 1 and 5, reported as the \"rating\" or near \"reviews\". If you cannot find a rating number between 1 and 5, mark the product's rating as \"None\" to indicate one was not found. If you can find a valid rating number, include only the number in the Rating column, so write \"3.3\" as opposed to \"3.3 out of 5 stars\" \n\nFormat these datapoints as a CSV interpret-able string, surrounding each datapoint in quotes and delimiting each datapoint with ';'.\nBegin with the header specifying all the columns. Reminder: all data points must be surrounded by double quotes, especially product names that have commas in them, to ensure it is properly interpreted.\n\nAlso, if the CSV has product names that are cut off, such as with ellipses, like  \"STONCH Halloween Mask Skeleton Gloves Set, 3 Modes Light Up Scary LED Mask with LED Glow Gloves, Halloween Decorations Ano...\", and you find a more complete product name in the text content, replace the cut off name with the full name. Also, if a product name in the CSV has a brand name, especially if the brand name is written in all capitals, and the product name in the html text does not have it, replace the product name in the csv with the one from the html text. Otherwise do not edit the product name column.\n\nAdditionally, maintain the same number of items in the CSV as the CSV you are given. Do not add or remove items from them, only add and populate the Price and Rating columns for each product."
  combine_both_system_message: ""

  model: 'gpt-4'

  max_product_per_page: 10

  min_length:
    text: 15
    image: 20

  max_length:
    text: 200

  allowed_attrs:
    image: ['alt', 'src']

  attribute_primary_key:
    image: 'alt'
    
  product_name_fuzzy_threshold: 88

  product_url_attributes:
    href: true
  
  html_tag_limit: 
    attrs: 70
    text: 500

  html_tag_min:
    attrs: 0
    text: 100
  

  currencies: ['$','€','¥','£','¢','¤','฿','৳','₠','₡','₢','₣','₴','₰','₧','₳','₲','₪','₵','₯','₱','₨','₫', '\u20B3','\u0E3F','\u20BF', '\uFFE0','\u20A1','\u00A2','\u20A2','\u20B5','\u20AB','\u20AC','\uFFE1','\u00A3','\u20A4','\u20A3','\u0192','\u20B2','\u20AD','\u0141','\u20A5','\u20A6','\u20BD','\u20B1','\uFF04','\u0024','\u20AE','\u2133','\u20B6','\u20A9','\uFFE6','\u00A5','\uFFE5','\u20B4','\u20B8','\u00A4','\u20B0','\u17DB','\u20AA','\u20AF','\u20A0','\u20A7','\uFDFC','\u5186','\u5143','\u5713','\u3350','\uC6D0','\u09F3','\u20B9','\u20A8','\u09F2','\u0BF9']

      


